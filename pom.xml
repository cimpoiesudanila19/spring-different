<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>diplom</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>diplom</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>19</maven.compiler.source>
    <maven.compiler.target>19</maven.compiler.target>
  </properties>

  <dependencies>

    <!--
          spring-boot-starter-web - это одна из стартерных зависимостей Spring Boot, предназначенных для разработки веб-приложений.

          Стартер зависимостей Spring Boot это модуль Maven который содержит набор зависимостей необходимых для разработки веб-приложений
          Включает следующие модули:

          1 - Spring MVC
              Включает в себя компоненты для разработки веб-приложения с использованием паттерна проектирования MVC
              Основные компоненты:

              1 - DispatcherServlet
                  Центральный компонент Spring MVC, который принимает все входящие HTTP-запросы и координирует обработку запроса.
                  Он осуществляет маршрутизацию запросов на соответствующие обработчики (контроллеры) и управляет жизненным циклом контекста приложения.

              2 - Контроллеры (Controllers)
                  Классы, которые обрабатывают входящие HTTP-запросы и возвращают соответствующие HTTP-ответы. Контроллеры содержат методы,
                  которые аннотированы специальными аннотациями, указывающими URL-маршруты, типы запросов и другую информацию.

              3 - Модель (Model)
                  Представляет бизнес-логику и данные приложения. Модель может быть представлена классами Java, которые содержат данные и методы для работы с ними.

              4 - Представления (Views)
                  Отвечают за отображение данных пользователю. Spring MVC поддерживает различные типы представлений, такие как
                  JSP, Thymeleaf, HTML и другие. Представления могут использовать данные из модели для генерации конечного HTML-кода,
                  который будет отправлен клиенту.

                  JSP (JavaServer Pages) - это технология Java для создания динамических веб-страниц.
                  Позволяет встраивать код Java непосредственно в HTML-разметку, что облегчает генерацию динамического контента на сервере.

                  Thymeleaf - это шаблонизатор для разработки веб-приложений на языке Java. Он позволяет разработчикам создавать динамические веб-страницы,
                  в которых HTML-разметка объединяется с данными приложения.

              5 - Обработчики (Handlers)
                  Представляют собой методы в контроллерах, которые обрабатывают конкретные URL-маршруты и типы запросов.
                  Обработчики могут выполнять бизнес-логику, обращаться к модели для получения или обновления данных и возвращать результаты в виде представления.

              6 - Разрешители представлений (View Resolvers)
                  Отвечают за поиск и разрешение конкретного представления на основе имени представления или других критериев.
                  Разрешители представлений определяют, какое представление будет использоваться для отображения данных в ответ на запрос.

          2 - Встроенный контейнер сервлетов (Embedded Servlet Container)
              Механизм, который позволяет запускать веб-приложения напрямую изнутри самого приложения, без необходимости установки и настройки
              отдельного внешнего веб-сервера.

          3 - Spring Web
              Основные компоненты:

              1 - Веб-контроллеры (Web Controllers)
                  Предоставляет аннотации и классы для создания веб-контроллеров, которые обрабатывают HTTP-запросы и возвращают HTTP-ответы.
                  Это позволяет определить обработчики URL-маршрутов, типы запросов и другие параметры запроса.

              2 - Валидация данных (Data Validation)
                  Поддерживает механизм валидации данных, который позволяет проверять входные данные на соответствие определенным правилам и ограничениям.
                  Это обеспечивает более надежную обработку пользовательского ввода и предотвращает внесение некорректных данных.

              3 - Разрешение представлений (View Resolution)
                  Предоставляет механизм разрешения представлений, который позволяет находить и отображать представления (например, HTML-шаблоны)
                  для возвращаемых результатов. Это позволяет интегрировать различные шаблонизаторы и упрощает разработку пользовательского интерфейса.

              4 - Обработка форм (Form Handling)
                  Предоставляет поддержку обработки форм, включая привязку данных из HTML-формы к объектам Java, валидацию данных формы и
                  управление состоянием формы (CSRF-защита и др.).

              5 - Обработка исключений (Exception Handling)
                  Предоставляет возможности обработки исключений в веб-приложении. Это позволяет централизованно обрабатывать исключения и возвращать
                  соответствующие HTTP-ответы, обеспечивая более понятную и контролируемую обработку ошибок.

              6 - RESTful веб-сервисы (RESTful Web Services)
                  Предоставляет инструменты и аннотации для создания RESTful веб-сервисов, которые могут использоваться для обмена данными между клиентом
                  и сервером с использованием протокола HTTP и стандартных методов (GET, POST, PUT, DELETE и др.).

              7 - Межсервлетная коммуникация (Inter-Servlet Communication)
                  Предоставляет средства для взаимодействия между сервлетами, включая передачу данных между различными сервлетами и совместное использование ресурсов.

          4 - Spring Boot Auto-configuration
              Механизм автоматически настраивает приложение на основе наличия зависимостей и настроек в класспасе (Classpath) основан на принципе
              "соглашение по конфигурации" (convention over configuration), что позволяет значительно упростить настройку и развертывание приложений.
              Примеры автоматической конфигурации:

              1 - DataSource
                  Если в класспасе присутствует зависимость на JDBC, Spring Boot автоматически настроит источник данных (DataSource) на основе настроек,
                  указанных в файле application.properties или application.yml.

              2 - DispatcherServlet
                  Если в класспасе присутствует зависимость на Spring Web MVC, Spring Boot автоматически настроит DispatcherServlet
                  и основные настройки веб-приложения.

              3 - JPA и Hibernate
                  Если добавленны зависимости на JPA и Hibernate, Spring Boot автоматически настраивает EntityManagerFactory и TransactionManager
                  на основе настроек, указанных в application.properties или application.yml.

                  EntityManagerFactory - это интерфейс в Java Persistence API (JPA) используется для создания и управления
                  EntityManager-ов, которые взаимодействуют с базой данных в JPA-приложениях.

                  В контексте Java Persistence API (JPA), TransactionManager используется для управления транзакциями базы данных.
                  Он обеспечивает атомарность, согласованность, изолированность и долговечность (ACID) при выполнении операций чтения и записи данных.

              4 - Журналирование
                  Spring Boot предоставляет автоматическую настройку для различных фреймворков журналирования, таких как Logback или Log4j.
                  Не нужно создавать и настраивать файлы конфигурации журналирования вручную.

          5 - Spring Boot DevTools
              Это модуль в Spring Boot, который предоставляет набор инструментов для разработки приложений.
              Вот некоторые из основных возможностей:

              1 - Автоматическая перезагрузка (Live Reload)
              2 - Автоматическая перекомпиляция (Auto Restart)
              3 - Горячая перезагрузка (Hot Swapping)
              4 - Отключение кэша (Cache Disabling)

    -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <version>LATEST</version>
    </dependency>


    <!--
    spring-boot-starter-data-jpa: Включает зависимости для работы с базами данных через JPA (Java Persistence API), такие как Hibernate, Spring Data JPA и другие.
    -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
      <version>LATEST</version>
    </dependency>

    <!--
    mysql-connector-java - это зависимость (библиотека) для подключения и взаимодействия с базой данных MySQL в Java приложениях.
    Она предоставляет JDBC (Java Database Connectivity) драйвер для работы с MySQL.
    -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>LATEST</version>
    </dependency>

    <!--
    spring-boot-starter-security: Включает зависимости для добавления функциональности безопасности в приложение, такие как Spring Security и другие.
    -->

    <!--
    spring-boot-starter-test: Включает зависимости для тестирования приложений, такие как JUnit, Mockito и другие инструменты для модульного, интеграционного и функционального тестирования.
    -->


    <!--
    Зависимость в Spring Boot, которая предоставляет поддержку работы с базой данных с использованием JDBC (Java Database Connectivity).
    -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jdbc</artifactId>
      <version>LATEST</version>
    </dependency>

    <!--
    Модуль Spring Data, который обеспечивает интеграцию с MongoDB, нереляционной базой данных NoSQL.
    Предоставляет удобные инструменты и абстракции для работы с MongoDB в Java приложениях.
    -->
<!--    <dependency>-->
<!--      <groupId>org.springframework.data</groupId>-->
<!--      <artifactId>spring-data-mongodb</artifactId>-->
<!--      <version>LATEST</version>-->
<!--    </dependency>-->

    <!--
    Зависимость в Spring Boot, которая предоставляет поддержку работы с базой данных MongoDB
    -->
<!--    <dependency>-->
<!--      <groupId>org.springframework.boot</groupId>-->
<!--      <artifactId>spring-boot-starter-data-mongodb</artifactId>-->
<!--      <version>LATEST</version>-->
<!--    </dependency>-->

    <!--
    библиотека для Java, которая помогает упростить разработку, уменьшить объем написанного кода и повысить читаемость кода.
    Он достигает этого путем автоматической генерации кода на этапе компиляции, основываясь на аннотациях, добавленных к классам и полям.
    -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.20</version>
      <scope>provided</scope>
    </dependency>

    <!--
    зависимость в Spring Boot, которая предоставляет интеграцию с шаблонизатором Thymeleaf.
    Thymeleaf является мощным и гибким шаблонизатором, который позволяет разработчикам создавать динамические веб-страницы с использованием HTML, CSS и JavaScript.
    -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
      <version>LATEST</version>
    </dependency>

    <!--
    Зависимость (starter) в Spring Boot, которая облегчает создание RESTful API на основе репозиториев Spring Data.
    Автоматически создает REST-контроллеры для JPA-сущностей или репозиториев Spring Data, позволяя выполнять операции CRUD
    (создание, чтение, обновление, удаление) над данными без явного создания контроллеров.
    -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-rest</artifactId>
      <version>LATEST</version>
    </dependency>


  </dependencies>
</project>
